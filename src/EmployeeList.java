
import java.awt.Image;
import java.io.File;
import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dell
 */
public class EmployeeList extends javax.swing.JInternalFrame implements globalvariables {

    File myfile;
    String filename;
    String oldfilename;
    public static File mydoc;
    public static String olddocname;
    public static String docname;

    public EmployeeList() {
        initComponents();
        try {
            Connection myconnection;

            myconnection = DriverManager.getConnection(PATH + PLACE, USERNAME, PASSWORD);
            try {
                String a = "select * from employee";
                PreparedStatement mystatement = myconnection.prepareStatement(a);

                ResultSet myresult = mystatement.executeQuery();

                DefaultTableModel mymodel = (DefaultTableModel) jTable1.getModel();

                if (myresult.next()) {
                    jScrollPane2.setVisible(true);
                    getContentPane().revalidate();
                    mymodel.setRowCount(0);

                    do {
                        String id, name, desg, join;
                        id = myresult.getString("empid");
                        name = myresult.getString("empname");
                        desg = myresult.getString("designation");
                        join = myresult.getString("joiningdate");

                        mymodel.addRow(new Object[]{id, name, desg, join});
                    } while (myresult.next());

                } else {
                    jScrollPane2.setVisible(false);
                    JOptionPane.showMessageDialog(rootPane, "No records exists");
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error in Query " + e.getMessage());
            } finally {
                myconnection.close();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("Update Employee");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee Id", "Name", "Designation", "Date of Joining"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        jTabbedPane1.addTab("List", jScrollPane2);

        jPanel1.setLayout(null);

        gender.add(jRadioButton2);
        jRadioButton2.setText("Female");
        jPanel1.add(jRadioButton2);
        jRadioButton2.setBounds(290, 140, 80, 23);
        jPanel1.add(jTextField3);
        jTextField3.setBounds(204, 101, 166, 20);

        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.add(jLabel14);
        jLabel14.setBounds(460, 25, 117, 129);

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel7.setText("Designation");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(50, 400, 83, 20);
        jPanel1.add(jDateChooser2);
        jDateChooser2.setBounds(200, 440, 166, 20);

        jButton4.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 11)); // NOI18N
        jButton4.setText("Upload Image");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);
        jButton4.setBounds(460, 172, 120, 21);
        jPanel1.add(jDateChooser1);
        jDateChooser1.setBounds(200, 290, 166, 20);

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel2.setText("Father's Name");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(50, 104, 96, 14);

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel8.setText("Date of Joining");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(50, 440, 105, 20);

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel3.setText("Gender");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(50, 148, 51, 14);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Qualification", "10th Pass", "12th Pass", "Undergraduate", "Graduate", "Post Graduate" }));
        jPanel1.add(jComboBox1);
        jComboBox1.setBounds(200, 330, 166, 20);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(204, 173, 166, 82);

        jLabel9.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel9.setText("Employee Id");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(50, 25, 80, 20);
        jPanel1.add(jTextField4);
        jTextField4.setBounds(200, 370, 166, 20);

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel4.setText("Date of Birth");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(50, 290, 91, 20);

        jTextField1.setEditable(false);
        jPanel1.add(jTextField1);
        jTextField1.setBounds(204, 25, 166, 20);

        jButton1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(410, 440, 100, 25);

        jLabel12.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel12.setText("Address");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(50, 220, 56, 14);
        jPanel1.add(jTextField2);
        jTextField2.setBounds(204, 63, 166, 20);

        gender.add(jRadioButton1);
        jRadioButton1.setText("Male");
        jPanel1.add(jRadioButton1);
        jRadioButton1.setBounds(204, 139, 70, 23);

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel5.setText("Qualification");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(50, 330, 92, 14);

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel1.setText("Employee Name");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(50, 64, 105, 19);

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel6.setText("Basic Salary");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(50, 370, 87, 14);

        jLabel10.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel10.setText("Username");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(420, 320, 67, 20);

        jLabel11.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel11.setText("Password");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(420, 360, 69, 20);
        jPanel1.add(jTextField6);
        jTextField6.setBounds(510, 320, 135, 20);
        jPanel1.add(jTextField7);
        jTextField7.setBounds(510, 360, 133, 20);

        jLabel13.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel13.setText("UserType");
        jPanel1.add(jLabel13);
        jLabel13.setBounds(420, 400, 70, 20);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Type", "Admin", "Staff" }));
        jPanel1.add(jComboBox2);
        jComboBox2.setBounds(510, 400, 140, 20);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Designation", "Manager", "Assistant Manager", "Receptionist", "Clerk", "Bellhop", "Maid" }));
        jPanel1.add(jComboBox3);
        jComboBox3.setBounds(200, 400, 160, 20);

        jButton2.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 14)); // NOI18N
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(540, 440, 100, 25);

        jLabel22.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel22.setText("Document :");
        jPanel1.add(jLabel22);
        jLabel22.setBounds(423, 230, 74, 14);

        jButton5.setFont(new java.awt.Font("Copperplate Gothic Light", 0, 11)); // NOI18N
        jButton5.setText("Browse");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);
        jButton5.setBounds(568, 253, 98, 21);
        jPanel1.add(jTextField5);
        jTextField5.setBounds(507, 227, 156, 20);

        jTabbedPane1.addTab("View", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        try {
            Connection myconnection;

            myconnection = DriverManager.getConnection(PATH + PLACE, USERNAME, PASSWORD);

            try {
                int row = jTable1.getSelectedRow();
                String Table_click = (jTable1.getModel().getValueAt(row, 0).toString());
                String a = "select * from employee where empid = ?";
                PreparedStatement mystatement = myconnection.prepareStatement(a);
                mystatement.setString(1, Table_click);
                ResultSet myresult = mystatement.executeQuery();

                if (myresult.next()) {
                    jTextField1.setText(myresult.getString("empid"));
                    jTextField2.setText(myresult.getString("empname"));
                    jTextField3.setText(myresult.getString("father"));
                    if (myresult.getString("empgender").equals("Male")) {
                        jRadioButton1.setSelected(true);
                    } else {
                        jRadioButton2.setSelected(true);
                    }
                    jTextArea1.setText(myresult.getString("empaddress"));
                    jDateChooser1.setDate(myresult.getDate("empdob"));
                    jComboBox1.setSelectedItem(myresult.getString("qualification"));
                    jComboBox3.setSelectedItem(myresult.getString("designation"));
                    jTextField4.setText(myresult.getString("salary"));
                    jDateChooser2.setDate(myresult.getDate("joiningdate"));
                    String myfile = myresult.getString("image");
                    oldfilename = myfile;
                    Image simg = ImageIO.read(new File("userimages//" + myfile)).getScaledInstance(jLabel14.getWidth(), jLabel14.getHeight(), Image.SCALE_DEFAULT);
                    jLabel14.setIcon(new ImageIcon(simg));
                    jTextField6.setText(myresult.getString("username"));
                    jTextField7.setText(myresult.getString("password"));
                    jComboBox2.setSelectedItem(myresult.getString("type"));
                    jTextField5.setText(myresult.getString("files"));
                }

                jTabbedPane1.setSelectedIndex(1);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error in Query " + e.getMessage());
            } finally {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        JFileChooser myfilechooser = new JFileChooser();
        myfilechooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }
                String extension = f.getName().substring(f.getName().lastIndexOf(".") + 1);
                String[] approved = {"jpg", "gif", "png", "bmp", "jpeg"};
                for (String a : approved) {
                    if (a.equals(extension)) {
                        return true;
                    }
              
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "All Picture Files";
            }
        });
        int answer = myfilechooser.showOpenDialog(rootPane);

        if (answer == JFileChooser.APPROVE_OPTION) {
            myfile = myfilechooser.getSelectedFile();
            try {
                Image simg = ImageIO.read(new File(myfile.getAbsolutePath())).getScaledInstance(jLabel14.getWidth(), jLabel14.getHeight(), Image.SCALE_AREA_AVERAGING);
                jLabel14.setIcon(new ImageIcon(simg));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Cannot read image");
            }

        }

    }//GEN-LAST:event_jButton4ActionPerformed

    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Connection myconnection;

            myconnection = DriverManager.getConnection(PATH + PLACE, USERNAME, PASSWORD);
            try {
                String a = "delete from employee where empid=?";
                PreparedStatement mystatement = myconnection.prepareStatement(a);

                mystatement.setString(1, jTextField1.getText());

                int answer = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

                if (answer == JOptionPane.YES_OPTION) {
                    if (mystatement.executeUpdate() == 1) {
                        JOptionPane.showMessageDialog(rootPane, "Deleted Successfully");
                        
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Error in Deleting");
                    }
                this.dispose();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error in Query " + e.getMessage());
            } finally {
                myconnection.close();
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser myfilechooser = new JFileChooser();
        myfilechooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                }
                String extension = f.getName().substring(f.getName().lastIndexOf(".") + 1);
                String[] approved = {"txt","pdf","docx","doc"};
                for (String a : approved) {
                    if (a.equals(extension)) {
                        return true;
                    }
                }
                return false;
            }

            @Override
            public String getDescription() {
                return "All Document Files";
            }
        });
        int answer = myfilechooser.showOpenDialog(rootPane);

        if (answer == JFileChooser.APPROVE_OPTION) {
            mydoc = myfilechooser.getSelectedFile();
            try {

                jTextField5.setText(mydoc.getAbsolutePath());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Cannot read file");
            }
        }
        
         
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
               
        olddocname=jTextField5.getText().toString();
        if (myfile != null) {
            filename = new java.util.Date().getTime() + myfile.getName();//Date.getTime() added for unique file name.
            int i;
            FileInputStream rd = null;
            FileOutputStream outs = null;

            try {

                rd = new FileInputStream(myfile);
                outs = new FileOutputStream("userimages\\" + filename);//writing the new file in 'userimages' folder, in the project

                byte[] b = new byte[2048];
                while ((i = rd.read(b)) != -1) {
                    outs.write(b, 0, i); //copying from pictures to userimages byte by byte

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error" + e.getMessage());
            } finally {
                try {
                    rd.close();
                    outs.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error in closing file" + e.getMessage());
                }
            }
            File oldimage = new File("userimages\\" + oldfilename);
            if (!oldimage.getName().equals("default.png")) {
                oldimage.delete();
            }

        } else {
            filename = oldfilename;
        }
        
       if (mydoc != null) {
            docname = new java.util.Date().getTime() + mydoc.getName();//Date.getTime() added for unique file name.
            int i;
            FileInputStream rd = null;
            FileOutputStream outs = null;

            try {

                rd = new FileInputStream(mydoc);
                outs = new FileOutputStream("userfiles\\" + docname);//writing the new file in 'userfiles' folder, in the project

                byte[] b = new byte[2048];
                while ((i = rd.read(b)) != -1) {
                    outs.write(b, 0, i); //copying from documents to userfiles byte by byte

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error" + e.getMessage());
            } finally {
                try {
                    rd.close();
                    outs.close();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error in closing file" + e.getMessage());
                }
            }
            File olddoc = new File("userfiles\\" + olddocname);
            if (!olddoc.getName().equals("")) {
                olddoc.delete();
            }

        } else {
            docname = olddocname;
        }
        
        
        try {
            Connection myconnection;

            myconnection = DriverManager.getConnection(PATH + PLACE, USERNAME, PASSWORD);

            try {
                String a = "update employee set empname=?,father=?,empgender=?,empaddress=?,empdob=?,qualification=?,salary=?,designation=?,joiningdate=?,image=?,username=?,password=?,type=?,files=? where empid=?";
                PreparedStatement mystatement = myconnection.prepareStatement(a);
                mystatement.setString(15, jTextField1.getText());
                mystatement.setString(1, jTextField2.getText());
                mystatement.setString(2, jTextField3.getText());

                if (jRadioButton1.isSelected()) {
                    mystatement.setString(3, "Male");
                } else if (jRadioButton2.isSelected()) {
                    mystatement.setString(3, "Female");
                }

                mystatement.setString(4, jTextArea1.getText());

                SimpleDateFormat myformat = new SimpleDateFormat("yyyy-MM-dd");
                mystatement.setString(5, myformat.format(jDateChooser1.getDate()));

                mystatement.setString(6, jComboBox1.getSelectedItem().toString());

                mystatement.setString(7, jTextField4.getText());
                mystatement.setString(8, jComboBox3.getSelectedItem().toString());

                SimpleDateFormat myformat2 = new SimpleDateFormat("yyyy-MM-dd");
                mystatement.setString(9, myformat2.format(jDateChooser2.getDate()));

                mystatement.setString(10, filename);
                mystatement.setString(11, jTextField6.getText());
                mystatement.setString(12, jTextField7.getText());
                mystatement.setString(13, jComboBox2.getSelectedItem().toString());
                mystatement.setString(14, docname);

                if (mystatement.executeUpdate() == 1) {
                    JOptionPane.showMessageDialog(rootPane, "Updated Successfully");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error in Query " + e.getMessage());
            } finally {
                myconnection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error in Connection " + e.getMessage());
        }
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup gender;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    // End of variables declaration//GEN-END:variables
}
